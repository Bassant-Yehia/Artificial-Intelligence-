state(gate_a,gate_b).
state(gate_a,gate_g).
state(gate_b,gate_c).
state(gate_b,gate_h).
state(gate_h,gate_o).
state(gate_c,gate_d).
state(gate_d,gate_i).
state(gate_d,gate_j).
state(gate_i,gate_p).
state(gate_p,gate_q).
state(gate_j,gate_r).
state(gate_r,hall).
state(gate_g,gate_l).
state(gate_g,gate_f).
state(gate_l,gate_s).

end(hall).


:-use_module(library(lists)).

goSolveTheMaze2(Start,Goal):-
      path([[Start,null]],[],Goal).

path([],_,_):-
      write('No solution'),nl,!.

path([[Goal,Parent] | _], Closed, Goal):-
      write('A solution is found'), nl ,
      printsolution([Goal,Parent],Closed),!.

path(Open, Closed, Goal):-
    removeFromOpen(Open,[State,Parent],RestOfOpen),
    getchildren(State, Open, Closed, Children),
    append(Children , RestOfOpen, NewOpen),
    path(NewOpen, [[State,Parent]|Closed], Goal).

getchildren(State, Open ,Closed , Children):-
       bagof(X, moves( State, Open, Closed, X), Children), ! .

getchildren(_,_,_, []).

removeFromOpen([State|RestOpen], State, RestOpen).

moves( State, Open, Closed,[Next,State]):-
       state(State,Next),
       \+ member([Next,_],Open),
       \+ member([Next,_],Closed).

printsolution([State, null],_):-
        write(State).
        printsolution([State, Parent], Closed):-
        member([Parent, GrandParent], Closed),
        printsolution([Parent, GrandParent], Closed),
        write(' -> '),
        write(State).
